# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ListadeListas
else:
    import _ListadeListas

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ListadeListas.delete_SwigPyIterator

    def value(self):
        return _ListadeListas.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _ListadeListas.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _ListadeListas.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _ListadeListas.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _ListadeListas.SwigPyIterator_equal(self, x)

    def copy(self):
        return _ListadeListas.SwigPyIterator_copy(self)

    def next(self):
        return _ListadeListas.SwigPyIterator_next(self)

    def __next__(self):
        return _ListadeListas.SwigPyIterator___next__(self)

    def previous(self):
        return _ListadeListas.SwigPyIterator_previous(self)

    def advance(self, n):
        return _ListadeListas.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _ListadeListas.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _ListadeListas.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _ListadeListas.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _ListadeListas.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _ListadeListas.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _ListadeListas.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _ListadeListas:
_ListadeListas.SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _ListadeListas.SHARED_PTR_DISOWN
class Nodo_Article(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_ListadeListas.Nodo_Article_id_get, _ListadeListas.Nodo_Article_id_set)
    categoria = property(_ListadeListas.Nodo_Article_categoria_get, _ListadeListas.Nodo_Article_categoria_set)
    precio = property(_ListadeListas.Nodo_Article_precio_get, _ListadeListas.Nodo_Article_precio_set)
    nombre = property(_ListadeListas.Nodo_Article_nombre_get, _ListadeListas.Nodo_Article_nombre_set)
    src = property(_ListadeListas.Nodo_Article_src_get, _ListadeListas.Nodo_Article_src_set)
    siguiente = property(_ListadeListas.Nodo_Article_siguiente_get, _ListadeListas.Nodo_Article_siguiente_set)
    anterior = property(_ListadeListas.Nodo_Article_anterior_get, _ListadeListas.Nodo_Article_anterior_set)

    def __init__(self, *args):
        _ListadeListas.Nodo_Article_swiginit(self, _ListadeListas.new_Nodo_Article(*args))
    __swig_destroy__ = _ListadeListas.delete_Nodo_Article

# Register Nodo_Article in _ListadeListas:
_ListadeListas.Nodo_Article_swigregister(Nodo_Article)

class ListaArt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cabeza = property(_ListadeListas.ListaArt_cabeza_get, _ListadeListas.ListaArt_cabeza_set)
    final = property(_ListadeListas.ListaArt_final_get, _ListadeListas.ListaArt_final_set)
    ArticuloSeleccionado = property(_ListadeListas.ListaArt_ArticuloSeleccionado_get, _ListadeListas.ListaArt_ArticuloSeleccionado_set)
    valormasbajo = property(_ListadeListas.ListaArt_valormasbajo_get, _ListadeListas.ListaArt_valormasbajo_set)
    ArticuloEsta = property(_ListadeListas.ListaArt_ArticuloEsta_get, _ListadeListas.ListaArt_ArticuloEsta_set)

    def __init__(self):
        _ListadeListas.ListaArt_swiginit(self, _ListadeListas.new_ListaArt())

    def add(self, id, categoria, precio, nombre, src):
        return _ListadeListas.ListaArt_add(self, id, categoria, precio, nombre, src)

    def DisplayART(self):
        return _ListadeListas.ListaArt_DisplayART(self)

    def mover(self, inicio, final):
        return _ListadeListas.ListaArt_mover(self, inicio, final)

    def subgraph(self, nombrecat):
        return _ListadeListas.ListaArt_subgraph(self, nombrecat)

    def Bubble(self):
        return _ListadeListas.ListaArt_Bubble(self)
    __swig_destroy__ = _ListadeListas.delete_ListaArt

# Register ListaArt in _ListadeListas:
_ListadeListas.ListaArt_swigregister(ListaArt)

class Nodo_List_A(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    categoria = property(_ListadeListas.Nodo_List_A_categoria_get, _ListadeListas.Nodo_List_A_categoria_set)
    siguiente = property(_ListadeListas.Nodo_List_A_siguiente_get, _ListadeListas.Nodo_List_A_siguiente_set)
    anterior = property(_ListadeListas.Nodo_List_A_anterior_get, _ListadeListas.Nodo_List_A_anterior_set)
    abajo = property(_ListadeListas.Nodo_List_A_abajo_get, _ListadeListas.Nodo_List_A_abajo_set)

    def __init__(self, categoria):
        _ListadeListas.Nodo_List_A_swiginit(self, _ListadeListas.new_Nodo_List_A(categoria))
    __swig_destroy__ = _ListadeListas.delete_Nodo_List_A

# Register Nodo_List_A in _ListadeListas:
_ListadeListas.Nodo_List_A_swigregister(Nodo_List_A)

class ListaListas(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cabeza = property(_ListadeListas.ListaListas_cabeza_get, _ListadeListas.ListaListas_cabeza_set)
    final = property(_ListadeListas.ListaListas_final_get, _ListadeListas.ListaListas_final_set)
    Seleccionado = property(_ListadeListas.ListaListas_Seleccionado_get, _ListadeListas.ListaListas_Seleccionado_set)
    articulo = property(_ListadeListas.ListaListas_articulo_get, _ListadeListas.ListaListas_articulo_set)

    def __init__(self):
        _ListadeListas.ListaListas_swiginit(self, _ListadeListas.new_ListaListas())

    def AgregarCate(self, categoria):
        return _ListadeListas.ListaListas_AgregarCate(self, categoria)

    def mover(self, inicio, final):
        return _ListadeListas.ListaListas_mover(self, inicio, final)

    def Burbuja(self):
        return _ListadeListas.ListaListas_Burbuja(self)

    def agregarArticulo(self, id, categoria, nombre, precio, src):
        return _ListadeListas.ListaListas_agregarArticulo(self, id, categoria, nombre, precio, src)

    def Display(self):
        return _ListadeListas.ListaListas_Display(self)

    def Display2(self):
        return _ListadeListas.ListaListas_Display2(self)

    def Graph(self):
        return _ListadeListas.ListaListas_Graph(self)
    __swig_destroy__ = _ListadeListas.delete_ListaListas

# Register ListaListas in _ListadeListas:
_ListadeListas.ListaListas_swigregister(ListaListas)



