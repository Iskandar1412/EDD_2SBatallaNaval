# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Pila
else:
    import _Pila

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Pila.delete_SwigPyIterator

    def value(self):
        return _Pila.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _Pila.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _Pila.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _Pila.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _Pila.SwigPyIterator_equal(self, x)

    def copy(self):
        return _Pila.SwigPyIterator_copy(self)

    def next(self):
        return _Pila.SwigPyIterator_next(self)

    def __next__(self):
        return _Pila.SwigPyIterator___next__(self)

    def previous(self):
        return _Pila.SwigPyIterator_previous(self)

    def advance(self, n):
        return _Pila.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _Pila.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _Pila.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _Pila.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _Pila.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _Pila.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _Pila.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _Pila:
_Pila.SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _Pila.SHARED_PTR_DISOWN
class NodoPila(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_Pila.NodoPila_id_get, _Pila.NodoPila_id_set)
    x = property(_Pila.NodoPila_x_get, _Pila.NodoPila_x_set)
    y = property(_Pila.NodoPila_y_get, _Pila.NodoPila_y_set)
    abajo = property(_Pila.NodoPila_abajo_get, _Pila.NodoPila_abajo_set)

    def __init__(self, x, y):
        _Pila.NodoPila_swiginit(self, _Pila.new_NodoPila(x, y))
    __swig_destroy__ = _Pila.delete_NodoPila

# Register NodoPila in _Pila:
_Pila.NodoPila_swigregister(NodoPila)

class Pila(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    longitudpila = property(_Pila.Pila_longitudpila_get, _Pila.Pila_longitudpila_set)
    cima = property(_Pila.Pila_cima_get, _Pila.Pila_cima_set)

    def __init__(self):
        _Pila.Pila_swiginit(self, _Pila.new_Pila())

    def push(self, x, y):
        return _Pila.Pila_push(self, x, y)

    def pop(self):
        return _Pila.Pila_pop(self)

    def peek(self):
        return _Pila.Pila_peek(self)
    __swig_destroy__ = _Pila.delete_Pila

# Register Pila in _Pila:
_Pila.Pila_swigregister(Pila)

class NodoListaP(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_Pila.NodoListaP_id_get, _Pila.NodoListaP_id_set)
    nombre = property(_Pila.NodoListaP_nombre_get, _Pila.NodoListaP_nombre_set)
    siguiente = property(_Pila.NodoListaP_siguiente_get, _Pila.NodoListaP_siguiente_set)
    abajo = property(_Pila.NodoListaP_abajo_get, _Pila.NodoListaP_abajo_set)
    retroceso = property(_Pila.NodoListaP_retroceso_get, _Pila.NodoListaP_retroceso_set)

    def __init__(self, nombre):
        _Pila.NodoListaP_swiginit(self, _Pila.new_NodoListaP(nombre))
    __swig_destroy__ = _Pila.delete_NodoListaP

# Register NodoListaP in _Pila:
_Pila.NodoListaP_swigregister(NodoListaP)

class ListaPila(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    inicio = property(_Pila.ListaPila_inicio_get, _Pila.ListaPila_inicio_set)
    longitud = property(_Pila.ListaPila_longitud_get, _Pila.ListaPila_longitud_set)
    transaccion_exitosa = property(_Pila.ListaPila_transaccion_exitosa_get, _Pila.ListaPila_transaccion_exitosa_set)

    def __init__(self):
        _Pila.ListaPila_swiginit(self, _Pila.new_ListaPila())

    def insertar(self, jugada, nombre):
        return _Pila.ListaPila_insertar(self, jugada, nombre)

    def agregaraPila(self, nombre, jugada, x, y):
        return _Pila.ListaPila_agregaraPila(self, nombre, jugada, x, y)

    def obtenerXactual(self, jugada, nombre):
        return _Pila.ListaPila_obtenerXactual(self, jugada, nombre)

    def obtenerYactual(self, jugada, nombre):
        return _Pila.ListaPila_obtenerYactual(self, jugada, nombre)

    def eliminardePila(self, nombre):
        return _Pila.ListaPila_eliminardePila(self, nombre)

    def mostrar(self):
        return _Pila.ListaPila_mostrar(self)

    def MostrarSoloNMovimientos(self):
        return _Pila.ListaPila_MostrarSoloNMovimientos(self)

    def subgraph(self, aux):
        return _Pila.ListaPila_subgraph(self, aux)

    def Grapho(self):
        return _Pila.ListaPila_Grapho(self)

    def subreg(self, aux):
        return _Pila.ListaPila_subreg(self, aux)

    def Regresion(self, nombre):
        return _Pila.ListaPila_Regresion(self, nombre)
    __swig_destroy__ = _Pila.delete_ListaPila

# Register ListaPila in _Pila:
_Pila.ListaPila_swigregister(ListaPila)



