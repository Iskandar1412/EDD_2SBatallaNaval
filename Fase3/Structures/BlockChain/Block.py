# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Block
else:
    import _Block

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Block.delete_SwigPyIterator

    def value(self):
        return _Block.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _Block.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _Block.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _Block.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _Block.SwigPyIterator_equal(self, x)

    def copy(self):
        return _Block.SwigPyIterator_copy(self)

    def next(self):
        return _Block.SwigPyIterator_next(self)

    def __next__(self):
        return _Block.SwigPyIterator___next__(self)

    def previous(self):
        return _Block.SwigPyIterator_previous(self)

    def advance(self, n):
        return _Block.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _Block.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _Block.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _Block.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _Block.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _Block.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _Block.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _Block:
_Block.SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _Block.SHARED_PTR_DISOWN
class Bloque(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ID = property(_Block.Bloque_ID_get, _Block.Bloque_ID_set)
    Timestap = property(_Block.Bloque_Timestap_get, _Block.Bloque_Timestap_set)
    Nonce = property(_Block.Bloque_Nonce_get, _Block.Bloque_Nonce_set)
    PreHash = property(_Block.Bloque_PreHash_get, _Block.Bloque_PreHash_set)
    RootMerkle = property(_Block.Bloque_RootMerkle_get, _Block.Bloque_RootMerkle_set)
    Hash = property(_Block.Bloque_Hash_get, _Block.Bloque_Hash_set)
    sha = property(_Block.Bloque_sha_get, _Block.Bloque_sha_set)

    def __init__(self):
        _Block.Bloque_swiginit(self, _Block.new_Bloque())

    def SetDataTime(self):
        return _Block.Bloque_SetDataTime(self)

    def crearBloque(self, MerkleRoot, cantidadceros, cerosStr):
        return _Block.Bloque_crearBloque(self, MerkleRoot, cantidadceros, cerosStr)
    __swig_destroy__ = _Block.delete_Bloque

# Register Bloque in _Block:
_Block.Bloque_swigregister(Bloque)

class NodoBlock(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    IDBlock = property(_Block.NodoBlock_IDBlock_get, _Block.NodoBlock_IDBlock_set)
    Hash = property(_Block.NodoBlock_Hash_get, _Block.NodoBlock_Hash_set)
    Nonce = property(_Block.NodoBlock_Nonce_get, _Block.NodoBlock_Nonce_set)
    PreHash = property(_Block.NodoBlock_PreHash_get, _Block.NodoBlock_PreHash_set)
    MerkleRoot = property(_Block.NodoBlock_MerkleRoot_get, _Block.NodoBlock_MerkleRoot_set)
    data = property(_Block.NodoBlock_data_get, _Block.NodoBlock_data_set)
    data_noajustado = property(_Block.NodoBlock_data_noajustado_get, _Block.NodoBlock_data_noajustado_set)
    fecha = property(_Block.NodoBlock_fecha_get, _Block.NodoBlock_fecha_set)
    siguiente = property(_Block.NodoBlock_siguiente_get, _Block.NodoBlock_siguiente_set)

    def __init__(self, _IDBlock, _Nonce, _Hash, _PreHash, _MerkleRoot, _data, _fecha, data_noajustado):
        _Block.NodoBlock_swiginit(self, _Block.new_NodoBlock(_IDBlock, _Nonce, _Hash, _PreHash, _MerkleRoot, _data, _fecha, data_noajustado))
    __swig_destroy__ = _Block.delete_NodoBlock

# Register NodoBlock in _Block:
_Block.NodoBlock_swigregister(NodoBlock)

class BlockChain(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    raiz = property(_Block.BlockChain_raiz_get, _Block.BlockChain_raiz_set)
    ultimo = property(_Block.BlockChain_ultimo_get, _Block.BlockChain_ultimo_set)
    bloque = property(_Block.BlockChain_bloque_get, _Block.BlockChain_bloque_set)
    previoushash = property(_Block.BlockChain_previoushash_get, _Block.BlockChain_previoushash_set)

    def __init__(self):
        _Block.BlockChain_swiginit(self, _Block.new_BlockChain())

    def insertar(self, data, merkleroot, cantidadceros, cerosStr, data_sinarreglar):
        return _Block.BlockChain_insertar(self, data, merkleroot, cantidadceros, cerosStr, data_sinarreglar)

    def recargarBloques(self, id, timestap, nonce, data, prehash, merkleroot, hash, data_sinarreglar):
        return _Block.BlockChain_recargarBloques(self, id, timestap, nonce, data, prehash, merkleroot, hash, data_sinarreglar)

    def toJson(self):
        return _Block.BlockChain_toJson(self)

    def graphosBlock(self):
        return _Block.BlockChain_graphosBlock(self)
    __swig_destroy__ = _Block.delete_BlockChain

# Register BlockChain in _Block:
_Block.BlockChain_swigregister(BlockChain)



