# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Usuarios
else:
    import _Usuarios

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Usuarios.delete_SwigPyIterator

    def value(self):
        return _Usuarios.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _Usuarios.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _Usuarios.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _Usuarios.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _Usuarios.SwigPyIterator_equal(self, x)

    def copy(self):
        return _Usuarios.SwigPyIterator_copy(self)

    def next(self):
        return _Usuarios.SwigPyIterator_next(self)

    def __next__(self):
        return _Usuarios.SwigPyIterator___next__(self)

    def previous(self):
        return _Usuarios.SwigPyIterator_previous(self)

    def advance(self, n):
        return _Usuarios.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _Usuarios.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _Usuarios.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _Usuarios.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _Usuarios.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _Usuarios.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _Usuarios.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _Usuarios:
_Usuarios.SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _Usuarios.SHARED_PTR_DISOWN
class Nodo_Carrito(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_Usuarios.Nodo_Carrito_id_get, _Usuarios.Nodo_Carrito_id_set)
    idvalor = property(_Usuarios.Nodo_Carrito_idvalor_get, _Usuarios.Nodo_Carrito_idvalor_set)
    categoria = property(_Usuarios.Nodo_Carrito_categoria_get, _Usuarios.Nodo_Carrito_categoria_set)
    precio = property(_Usuarios.Nodo_Carrito_precio_get, _Usuarios.Nodo_Carrito_precio_set)
    nombre = property(_Usuarios.Nodo_Carrito_nombre_get, _Usuarios.Nodo_Carrito_nombre_set)
    cantidad = property(_Usuarios.Nodo_Carrito_cantidad_get, _Usuarios.Nodo_Carrito_cantidad_set)
    numero_compra = property(_Usuarios.Nodo_Carrito_numero_compra_get, _Usuarios.Nodo_Carrito_numero_compra_set)
    horafecha = property(_Usuarios.Nodo_Carrito_horafecha_get, _Usuarios.Nodo_Carrito_horafecha_set)
    siguiente = property(_Usuarios.Nodo_Carrito_siguiente_get, _Usuarios.Nodo_Carrito_siguiente_set)

    def __init__(self, *args):
        _Usuarios.Nodo_Carrito_swiginit(self, _Usuarios.new_Nodo_Carrito(*args))
    __swig_destroy__ = _Usuarios.delete_Nodo_Carrito

# Register Nodo_Carrito in _Usuarios:
_Usuarios.Nodo_Carrito_swigregister(Nodo_Carrito)

class Lista_Carrito(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cabeza = property(_Usuarios.Lista_Carrito_cabeza_get, _Usuarios.Lista_Carrito_cabeza_set)
    valormasbajo = property(_Usuarios.Lista_Carrito_valormasbajo_get, _Usuarios.Lista_Carrito_valormasbajo_set)
    longitud = property(_Usuarios.Lista_Carrito_longitud_get, _Usuarios.Lista_Carrito_longitud_set)
    numerocompra = property(_Usuarios.Lista_Carrito_numerocompra_get, _Usuarios.Lista_Carrito_numerocompra_set)

    def __init__(self):
        _Usuarios.Lista_Carrito_swiginit(self, _Usuarios.new_Lista_Carrito())

    def agregar_carro(self, id, nombre, categoria, precio, cantidad, horafecha):
        return _Usuarios.Lista_Carrito_agregar_carro(self, id, nombre, categoria, precio, cantidad, horafecha)

    def EliminarCarrito(self, pos):
        return _Usuarios.Lista_Carrito_EliminarCarrito(self, pos)

    def buscarEliminarCompra(self, id, id_uduario):
        return _Usuarios.Lista_Carrito_buscarEliminarCompra(self, id, id_uduario)

    def cancelarCompra(self):
        return _Usuarios.Lista_Carrito_cancelarCompra(self)

    def aumentarCompra(self):
        return _Usuarios.Lista_Carrito_aumentarCompra(self)

    def vaciarCarrito(self):
        return _Usuarios.Lista_Carrito_vaciarCarrito(self)

    def DisplayCarrito(self):
        return _Usuarios.Lista_Carrito_DisplayCarrito(self)

    def sub(self, nombre):
        return _Usuarios.Lista_Carrito_sub(self, nombre)

    def mover(self, inicio, final):
        return _Usuarios.Lista_Carrito_mover(self, inicio, final)

    def Ordenar(self):
        return _Usuarios.Lista_Carrito_Ordenar(self)
    __swig_destroy__ = _Usuarios.delete_Lista_Carrito

# Register Lista_Carrito in _Usuarios:
_Usuarios.Lista_Carrito_swigregister(Lista_Carrito)

class Nodo_ListaUsuario(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    sha = property(_Usuarios.Nodo_ListaUsuario_sha_get, _Usuarios.Nodo_ListaUsuario_sha_set)
    nick = property(_Usuarios.Nodo_ListaUsuario_nick_get, _Usuarios.Nodo_ListaUsuario_nick_set)
    id = property(_Usuarios.Nodo_ListaUsuario_id_get, _Usuarios.Nodo_ListaUsuario_id_set)
    password = property(_Usuarios.Nodo_ListaUsuario_password_get, _Usuarios.Nodo_ListaUsuario_password_set)
    edad = property(_Usuarios.Nodo_ListaUsuario_edad_get, _Usuarios.Nodo_ListaUsuario_edad_set)
    monedas = property(_Usuarios.Nodo_ListaUsuario_monedas_get, _Usuarios.Nodo_ListaUsuario_monedas_set)
    cantidad_jugadas = property(_Usuarios.Nodo_ListaUsuario_cantidad_jugadas_get, _Usuarios.Nodo_ListaUsuario_cantidad_jugadas_set)
    cantidad_comprada = property(_Usuarios.Nodo_ListaUsuario_cantidad_comprada_get, _Usuarios.Nodo_ListaUsuario_cantidad_comprada_set)
    WalletUSR = property(_Usuarios.Nodo_ListaUsuario_WalletUSR_get, _Usuarios.Nodo_ListaUsuario_WalletUSR_set)
    LlaveWallet = property(_Usuarios.Nodo_ListaUsuario_LlaveWallet_get, _Usuarios.Nodo_ListaUsuario_LlaveWallet_set)
    encrypt = property(_Usuarios.Nodo_ListaUsuario_encrypt_get, _Usuarios.Nodo_ListaUsuario_encrypt_set)
    siguiente = property(_Usuarios.Nodo_ListaUsuario_siguiente_get, _Usuarios.Nodo_ListaUsuario_siguiente_set)
    anterior = property(_Usuarios.Nodo_ListaUsuario_anterior_get, _Usuarios.Nodo_ListaUsuario_anterior_set)
    carrito = property(_Usuarios.Nodo_ListaUsuario_carrito_get, _Usuarios.Nodo_ListaUsuario_carrito_set)

    def __init__(self, id, nick, password, edad, monedas, WalletUSR):
        _Usuarios.Nodo_ListaUsuario_swiginit(self, _Usuarios.new_Nodo_ListaUsuario(id, nick, password, edad, monedas, WalletUSR))
    __swig_destroy__ = _Usuarios.delete_Nodo_ListaUsuario

# Register Nodo_ListaUsuario in _Usuarios:
_Usuarios.Nodo_ListaUsuario_swigregister(Nodo_ListaUsuario)

class Lista_Usuario(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    contadorB = property(_Usuarios.Lista_Usuario_contadorB_get, _Usuarios.Lista_Usuario_contadorB_set)
    contador_regresos = property(_Usuarios.Lista_Usuario_contador_regresos_get, _Usuarios.Lista_Usuario_contador_regresos_set)
    cabeza = property(_Usuarios.Lista_Usuario_cabeza_get, _Usuarios.Lista_Usuario_cabeza_set)
    final = property(_Usuarios.Lista_Usuario_final_get, _Usuarios.Lista_Usuario_final_set)
    jugador2llamado = property(_Usuarios.Lista_Usuario_jugador2llamado_get, _Usuarios.Lista_Usuario_jugador2llamado_set)
    secionIniciada = property(_Usuarios.Lista_Usuario_secionIniciada_get, _Usuarios.Lista_Usuario_secionIniciada_set)
    usuario_secundario = property(_Usuarios.Lista_Usuario_usuario_secundario_get, _Usuarios.Lista_Usuario_usuario_secundario_set)
    usuario_act = property(_Usuarios.Lista_Usuario_usuario_act_get, _Usuarios.Lista_Usuario_usuario_act_set)

    def __init__(self):
        _Usuarios.Lista_Usuario_swiginit(self, _Usuarios.new_Lista_Usuario())

    def add(self, id, nombre, password, edad, monedas, WalletUSR):
        return _Usuarios.Lista_Usuario_add(self, id, nombre, password, edad, monedas, WalletUSR)

    def Display(self):
        return _Usuarios.Lista_Usuario_Display(self)

    def DisplayCarrito(self):
        return _Usuarios.Lista_Usuario_DisplayCarrito(self)

    def LimpiarCarro(self):
        return _Usuarios.Lista_Usuario_LimpiarCarro(self)

    def eliminarprodDelCarro(self, id):
        return _Usuarios.Lista_Usuario_eliminarprodDelCarro(self, id)

    def quitarProducto(self, id_producto):
        return _Usuarios.Lista_Usuario_quitarProducto(self, id_producto)

    def aumentarNumeroCompra(self):
        return _Usuarios.Lista_Usuario_aumentarNumeroCompra(self)

    def AgregarWalletUsuario(self, walletUsuario):
        return _Usuarios.Lista_Usuario_AgregarWalletUsuario(self, walletUsuario)

    def AgregarKeyWallet(self, keywallet):
        return _Usuarios.Lista_Usuario_AgregarKeyWallet(self, keywallet)

    def AgregarCompra(self, id, nombre, categoria, precio, cantidad, horafecha):
        return _Usuarios.Lista_Usuario_AgregarCompra(self, id, nombre, categoria, precio, cantidad, horafecha)

    def RestandoMonedas(self, precio, cantidad):
        return _Usuarios.Lista_Usuario_RestandoMonedas(self, precio, cantidad)

    def RestandoPerCompra(self, total):
        return _Usuarios.Lista_Usuario_RestandoPerCompra(self, total)

    def RestarporPerder(self):
        return _Usuarios.Lista_Usuario_RestarporPerder(self)

    def RestarJugador2porPerder(self):
        return _Usuarios.Lista_Usuario_RestarJugador2porPerder(self)

    def ModificarMonedasUsuario2(self):
        return _Usuarios.Lista_Usuario_ModificarMonedasUsuario2(self)

    def ModificarMonedas(self):
        return _Usuarios.Lista_Usuario_ModificarMonedas(self)

    def GanarHundirjugador2(self):
        return _Usuarios.Lista_Usuario_GanarHundirjugador2(self)

    def GanarPorHundir(self):
        return _Usuarios.Lista_Usuario_GanarPorHundir(self)

    def aumentarPartidasJugador2(self):
        return _Usuarios.Lista_Usuario_aumentarPartidasJugador2(self)

    def aumentarPartidasJugadas(self):
        return _Usuarios.Lista_Usuario_aumentarPartidasJugadas(self)

    def obtenerjugadasjugador2(self):
        return _Usuarios.Lista_Usuario_obtenerjugadasjugador2(self)

    def obtenercantidadjugadas(self):
        return _Usuarios.Lista_Usuario_obtenercantidadjugadas(self)

    def InicioSecion(self, nick, password):
        return _Usuarios.Lista_Usuario_InicioSecion(self, nick, password)

    def LlamarJugador2(self, id):
        return _Usuarios.Lista_Usuario_LlamarJugador2(self, id)

    def modificarUsuario(self, id, nick, password, edad, money):
        return _Usuarios.Lista_Usuario_modificarUsuario(self, id, nick, password, edad, money)

    def salirjugador2(self):
        return _Usuarios.Lista_Usuario_salirjugador2(self)

    def cerrarSecion(self):
        return _Usuarios.Lista_Usuario_cerrarSecion(self)

    def nombrejugador2(self):
        return _Usuarios.Lista_Usuario_nombrejugador2(self)

    def nombreUsuario(self):
        return _Usuarios.Lista_Usuario_nombreUsuario(self)

    def idUsuario2(self):
        return _Usuarios.Lista_Usuario_idUsuario2(self)

    def idUsuario(self):
        return _Usuarios.Lista_Usuario_idUsuario(self)

    def edadUsuario(self):
        return _Usuarios.Lista_Usuario_edadUsuario(self)

    def monedasjugador2(self):
        return _Usuarios.Lista_Usuario_monedasjugador2(self)

    def monedasUsuario(self):
        return _Usuarios.Lista_Usuario_monedasUsuario(self)

    def passEncrypt(self):
        return _Usuarios.Lista_Usuario_passEncrypt(self)

    def passjugador2(self):
        return _Usuarios.Lista_Usuario_passjugador2(self)

    def passUsuario(self):
        return _Usuarios.Lista_Usuario_passUsuario(self)

    def eliminarUsuario(self, id):
        return _Usuarios.Lista_Usuario_eliminarUsuario(self, id)

    def GraficarArbolUsuarioActivo(self):
        return _Usuarios.Lista_Usuario_GraficarArbolUsuarioActivo(self)

    def mover(self, inicio, final):
        return _Usuarios.Lista_Usuario_mover(self, inicio, final)

    def Bubble(self):
        return _Usuarios.Lista_Usuario_Bubble(self)

    def GrafoDoble(self):
        return _Usuarios.Lista_Usuario_GrafoDoble(self)
    __swig_destroy__ = _Usuarios.delete_Lista_Usuario

# Register Lista_Usuario in _Usuarios:
_Usuarios.Lista_Usuario_swigregister(Lista_Usuario)



