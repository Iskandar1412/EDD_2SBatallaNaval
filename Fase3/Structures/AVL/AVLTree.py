# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _AVLTree
else:
    import _AVLTree

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AVLTree.delete_SwigPyIterator

    def value(self):
        return _AVLTree.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _AVLTree.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _AVLTree.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _AVLTree.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _AVLTree.SwigPyIterator_equal(self, x)

    def copy(self):
        return _AVLTree.SwigPyIterator_copy(self)

    def next(self):
        return _AVLTree.SwigPyIterator_next(self)

    def __next__(self):
        return _AVLTree.SwigPyIterator___next__(self)

    def previous(self):
        return _AVLTree.SwigPyIterator_previous(self)

    def advance(self, n):
        return _AVLTree.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _AVLTree.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _AVLTree.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _AVLTree.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _AVLTree.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _AVLTree.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _AVLTree.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _AVLTree:
_AVLTree.SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _AVLTree.SHARED_PTR_DISOWN
class NodoB_B(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_AVLTree.NodoB_B_id_get, _AVLTree.NodoB_B_id_set)
    nick = property(_AVLTree.NodoB_B_nick_get, _AVLTree.NodoB_B_nick_set)
    password = property(_AVLTree.NodoB_B_password_get, _AVLTree.NodoB_B_password_set)
    monedas = property(_AVLTree.NodoB_B_monedas_get, _AVLTree.NodoB_B_monedas_set)
    edad = property(_AVLTree.NodoB_B_edad_get, _AVLTree.NodoB_B_edad_set)
    siguiente = property(_AVLTree.NodoB_B_siguiente_get, _AVLTree.NodoB_B_siguiente_set)
    anterior = property(_AVLTree.NodoB_B_anterior_get, _AVLTree.NodoB_B_anterior_set)
    derecha = property(_AVLTree.NodoB_B_derecha_get, _AVLTree.NodoB_B_derecha_set)
    izquierda = property(_AVLTree.NodoB_B_izquierda_get, _AVLTree.NodoB_B_izquierda_set)

    def __init__(self, id, nick, password, edad, monedas):
        _AVLTree.NodoB_B_swiginit(self, _AVLTree.new_NodoB_B(id, nick, password, edad, monedas))
    __swig_destroy__ = _AVLTree.delete_NodoB_B

# Register NodoB_B in _AVLTree:
_AVLTree.NodoB_B_swigregister(NodoB_B)

class TreeB(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    orden_arbol = property(_AVLTree.TreeB_orden_arbol_get, _AVLTree.TreeB_orden_arbol_set)
    raiz = property(_AVLTree.TreeB_raiz_get, _AVLTree.TreeB_raiz_set)

    def __init__(self):
        _AVLTree.TreeB_swiginit(self, _AVLTree.new_TreeB())

    def add(self, id, nick, password, edad, monedas):
        return _AVLTree.TreeB_add(self, id, nick, password, edad, monedas)

    def Creacion_rama(self, nodo, rama):
        return _AVLTree.TreeB_Creacion_rama(self, nodo, rama)

    def dividir(self, rama):
        return _AVLTree.TreeB_dividir(self, rama)

    def Insertar_en_Rama(self, primero, final):
        return _AVLTree.TreeB_Insertar_en_Rama(self, primero, final)

    def Es_Hoja(self, primero):
        return _AVLTree.TreeB_Es_Hoja(self, primero)

    def Graph(self, primero):
        return _AVLTree.TreeB_Graph(self, primero)

    def Grapho_Ramas(self, nodo):
        return _AVLTree.TreeB_Grapho_Ramas(self, nodo)

    def Grapho_Raices(self, nodo):
        return _AVLTree.TreeB_Grapho_Raices(self, nodo)

    def Raices(self, nodo):
        return _AVLTree.TreeB_Raices(self, nodo)

    def Graficar(self):
        return _AVLTree.TreeB_Graficar(self)
    __swig_destroy__ = _AVLTree.delete_TreeB

# Register TreeB in _AVLTree:
_AVLTree.TreeB_swigregister(TreeB)

class Compra(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ID_Compra = property(_AVLTree.Compra_ID_Compra_get, _AVLTree.Compra_ID_Compra_set)
    nombre = property(_AVLTree.Compra_nombre_get, _AVLTree.Compra_nombre_set)
    cantidad = property(_AVLTree.Compra_cantidad_get, _AVLTree.Compra_cantidad_set)

    def __init__(self, *args):
        _AVLTree.Compra_swiginit(self, _AVLTree.new_Compra(*args))
    __swig_destroy__ = _AVLTree.delete_Compra

# Register Compra in _AVLTree:
_AVLTree.Compra_swigregister(Compra)

class NodoAVL(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    compra = property(_AVLTree.NodoAVL_compra_get, _AVLTree.NodoAVL_compra_set)
    id = property(_AVLTree.NodoAVL_id_get, _AVLTree.NodoAVL_id_set)
    altura = property(_AVLTree.NodoAVL_altura_get, _AVLTree.NodoAVL_altura_set)
    izquierda = property(_AVLTree.NodoAVL_izquierda_get, _AVLTree.NodoAVL_izquierda_set)
    derecha = property(_AVLTree.NodoAVL_derecha_get, _AVLTree.NodoAVL_derecha_set)

    def __init__(self, _compra):
        _AVLTree.NodoAVL_swiginit(self, _AVLTree.new_NodoAVL(_compra))
    __swig_destroy__ = _AVLTree.delete_NodoAVL

# Register NodoAVL in _AVLTree:
_AVLTree.NodoAVL_swigregister(NodoAVL)
cvar = _AVLTree.cvar

class AVLTree(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    raiz = property(_AVLTree.AVLTree_raiz_get, _AVLTree.AVLTree_raiz_set)

    def __init__(self):
        _AVLTree.AVLTree_swiginit(self, _AVLTree.new_AVLTree())

    def Val_Max(self, valor_minimo, valor_maximo):
        return _AVLTree.AVLTree_Val_Max(self, valor_minimo, valor_maximo)

    def altura(self, nodo):
        return _AVLTree.AVLTree_altura(self, nodo)

    def add(self, compra):
        return _AVLTree.AVLTree_add(self, compra)

    def agregar_val(self, compra, nodo):
        return _AVLTree.AVLTree_agregar_val(self, compra, nodo)

    def rotar_izquierda(self, nodo):
        return _AVLTree.AVLTree_rotar_izquierda(self, nodo)

    def rotar_derecha(self, nodo):
        return _AVLTree.AVLTree_rotar_derecha(self, nodo)

    def rotar_derecha_d(self, nodo):
        return _AVLTree.AVLTree_rotar_derecha_d(self, nodo)

    def rotar_izquierda_d(self, nodo):
        return _AVLTree.AVLTree_rotar_izquierda_d(self, nodo)

    def GraphCU(self, nombre):
        return _AVLTree.AVLTree_GraphCU(self, nombre)

    def Ramas_dot(self, nodo):
        return _AVLTree.AVLTree_Ramas_dot(self, nodo)
    __swig_destroy__ = _AVLTree.delete_AVLTree

# Register AVLTree in _AVLTree:
_AVLTree.AVLTree_swigregister(AVLTree)

class DobleLinkUSR(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    sha = property(_AVLTree.DobleLinkUSR_sha_get, _AVLTree.DobleLinkUSR_sha_set)
    nick = property(_AVLTree.DobleLinkUSR_nick_get, _AVLTree.DobleLinkUSR_nick_set)
    id = property(_AVLTree.DobleLinkUSR_id_get, _AVLTree.DobleLinkUSR_id_set)
    password = property(_AVLTree.DobleLinkUSR_password_get, _AVLTree.DobleLinkUSR_password_set)
    edad = property(_AVLTree.DobleLinkUSR_edad_get, _AVLTree.DobleLinkUSR_edad_set)
    monedas = property(_AVLTree.DobleLinkUSR_monedas_get, _AVLTree.DobleLinkUSR_monedas_set)
    cantidad_jugadas = property(_AVLTree.DobleLinkUSR_cantidad_jugadas_get, _AVLTree.DobleLinkUSR_cantidad_jugadas_set)
    encrypt = property(_AVLTree.DobleLinkUSR_encrypt_get, _AVLTree.DobleLinkUSR_encrypt_set)
    siguiente = property(_AVLTree.DobleLinkUSR_siguiente_get, _AVLTree.DobleLinkUSR_siguiente_set)
    anterior = property(_AVLTree.DobleLinkUSR_anterior_get, _AVLTree.DobleLinkUSR_anterior_set)
    ArbolAVL = property(_AVLTree.DobleLinkUSR_ArbolAVL_get, _AVLTree.DobleLinkUSR_ArbolAVL_set)

    def __init__(self, id, nick, password, edad, monedas):
        _AVLTree.DobleLinkUSR_swiginit(self, _AVLTree.new_DobleLinkUSR(id, nick, password, edad, monedas))
    __swig_destroy__ = _AVLTree.delete_DobleLinkUSR

# Register DobleLinkUSR in _AVLTree:
_AVLTree.DobleLinkUSR_swigregister(DobleLinkUSR)

class DobleLUSR(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    contadorB = property(_AVLTree.DobleLUSR_contadorB_get, _AVLTree.DobleLUSR_contadorB_set)
    contador_regresos = property(_AVLTree.DobleLUSR_contador_regresos_get, _AVLTree.DobleLUSR_contador_regresos_set)
    cabeza = property(_AVLTree.DobleLUSR_cabeza_get, _AVLTree.DobleLUSR_cabeza_set)
    final = property(_AVLTree.DobleLUSR_final_get, _AVLTree.DobleLUSR_final_set)
    secionIniciada = property(_AVLTree.DobleLUSR_secionIniciada_get, _AVLTree.DobleLUSR_secionIniciada_set)
    usuario_act = property(_AVLTree.DobleLUSR_usuario_act_get, _AVLTree.DobleLUSR_usuario_act_set)
    arbolB = property(_AVLTree.DobleLUSR_arbolB_get, _AVLTree.DobleLUSR_arbolB_set)
    arbolB2 = property(_AVLTree.DobleLUSR_arbolB2_get, _AVLTree.DobleLUSR_arbolB2_set)
    arbolB3 = property(_AVLTree.DobleLUSR_arbolB3_get, _AVLTree.DobleLUSR_arbolB3_set)
    arbolB4 = property(_AVLTree.DobleLUSR_arbolB4_get, _AVLTree.DobleLUSR_arbolB4_set)
    arbolB5 = property(_AVLTree.DobleLUSR_arbolB5_get, _AVLTree.DobleLUSR_arbolB5_set)
    arbolB6 = property(_AVLTree.DobleLUSR_arbolB6_get, _AVLTree.DobleLUSR_arbolB6_set)

    def __init__(self):
        _AVLTree.DobleLUSR_swiginit(self, _AVLTree.new_DobleLUSR())

    def add(self, id, nombre, password, edad, monedas):
        return _AVLTree.DobleLUSR_add(self, id, nombre, password, edad, monedas)

    def AgregarCompra(self, id, nombre, cantidad, precio):
        return _AVLTree.DobleLUSR_AgregarCompra(self, id, nombre, cantidad, precio)

    def RestandoMonedas(self, precio, cantidad):
        return _AVLTree.DobleLUSR_RestandoMonedas(self, precio, cantidad)

    def RestarPorRetroceso(self):
        return _AVLTree.DobleLUSR_RestarPorRetroceso(self)

    def RestarPorAbandonar(self):
        return _AVLTree.DobleLUSR_RestarPorAbandonar(self)

    def ModificarMonedas(self):
        return _AVLTree.DobleLUSR_ModificarMonedas(self)

    def aumentarPartidasJugadas(self):
        return _AVLTree.DobleLUSR_aumentarPartidasJugadas(self)

    def obtenercantidadjugadas(self):
        return _AVLTree.DobleLUSR_obtenercantidadjugadas(self)

    def GanarPorHundir(self):
        return _AVLTree.DobleLUSR_GanarPorHundir(self)

    def Display(self):
        return _AVLTree.DobleLUSR_Display(self)

    def InicioSecion(self, nick, password):
        return _AVLTree.DobleLUSR_InicioSecion(self, nick, password)

    def modificarUsuario(self, id, nick, password, edad, money):
        return _AVLTree.DobleLUSR_modificarUsuario(self, id, nick, password, edad, money)

    def cerrarSecion(self):
        return _AVLTree.DobleLUSR_cerrarSecion(self)

    def GraficarArbolB(self):
        return _AVLTree.DobleLUSR_GraficarArbolB(self)

    def modificarArbol(self):
        return _AVLTree.DobleLUSR_modificarArbol(self)

    def nombreUsuario(self):
        return _AVLTree.DobleLUSR_nombreUsuario(self)

    def idUsuario(self):
        return _AVLTree.DobleLUSR_idUsuario(self)

    def edadUsuario(self):
        return _AVLTree.DobleLUSR_edadUsuario(self)

    def monedasUsuario(self):
        return _AVLTree.DobleLUSR_monedasUsuario(self)

    def passEncrypt(self):
        return _AVLTree.DobleLUSR_passEncrypt(self)

    def passUsuario(self):
        return _AVLTree.DobleLUSR_passUsuario(self)

    def eliminarUsuario(self, id):
        return _AVLTree.DobleLUSR_eliminarUsuario(self, id)

    def GraficarArbolUsuarioActivo(self):
        return _AVLTree.DobleLUSR_GraficarArbolUsuarioActivo(self)

    def mover(self, inicio, final):
        return _AVLTree.DobleLUSR_mover(self, inicio, final)

    def Bubble(self):
        return _AVLTree.DobleLUSR_Bubble(self)

    def GrafoDoble(self):
        return _AVLTree.DobleLUSR_GrafoDoble(self)
    __swig_destroy__ = _AVLTree.delete_DobleLUSR

# Register DobleLUSR in _AVLTree:
_AVLTree.DobleLUSR_swigregister(DobleLUSR)



